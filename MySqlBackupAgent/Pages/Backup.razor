@page "/backup/{TargetKey}"
@using MySqlBackupAgent.Services
@using MySqlBackupAgent.Models
@using System.Threading
@using System.Reactive.Linq

@inject BackupTargetService BackupTargets

<Confirmation @ref=_confirm />

<table class="table table-borderless">
    <thead class="thead-dark">
    <tr>
        <th colspan="2">@_view.Name</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td class="text-nowrap">Cron Schedule</td>
        <td class="w-100">
            <span>@_view.CronText</span>
            @if (_view.State == TargetState.Scheduled)
            {
                <BSButton Color="Color.Primary" OnClick="@ForceBackup">Backup Now</BSButton>
            }
        </td>
    </tr>
    <tr>
        <td class="text-nowrap">Status</td>
        <td>@_view.StatusText</td>
    </tr>
    <tr>
        <td class="text-nowrap">Progress</td>
        <td>
            @if (_view.State == TargetState.BackingUp || _view.State == TargetState.Compressing)
            {
                <BSProgress Value="@((int) _view.Progress)" IsStriped="true" IsAnimated="true"/>
            }
            else
            {
                <span>N/A</span>
            }
        </td>
    </tr>
    <tr>
        <td class="text-nowrap">Info Message</td>
        <td>
            @if (!string.IsNullOrEmpty(_view.InfoMessage))
            {
                <span>@_view.InfoMessage</span>
            }
            else
            {
                <span>N/A</span>
            }
        </td>
    </tr>
    </tbody>
</table>

<br />
<hr />
<br />

<table class="table table-borderless">
    <thead class="thead-dark">
    <tr>
        <th>Date</th>
        <th>Time</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var backup in _target.Backups)
    {
        
    }
    </tbody>
</table>

@code {
    [Parameter]
    public string TargetKey { get; set; }

    private DbTargetView _view;
    private DbBackupTarget _target;
    private Confirmation _confirm;

    protected override void OnInitialized()
    {
        var context = SynchronizationContext.Current;
        if (context == null)
        {
            throw new NullReferenceException("There appears to be no current SynchronizationContext");
        }
        
        var target = BackupTargets.Targets[TargetKey];
        _target = target;
        if (target == null)
        {
            throw new ArgumentException("Could not find backup target with that name");
        }
        
        _view = target.ToRepr();
        
        target.Progress //.Throttle(TimeSpan.FromSeconds(0.5))
            .ObserveOn(context)
            .Subscribe(d =>
            {
                _view.Progress = d;
                StateHasChanged();
            });

        // Update for overall state
        target.StateChange.ObserveOn(context)
            .Subscribe(s =>
            {
                _view.State = s;
                StateHasChanged();
            });
        
        // Update for next scheduled time 
        target.ScheduledChange.ObserveOn(context)
            .Subscribe(t =>
            {
                _view.NextTime = t;
                StateHasChanged();
            });

        target.InfoMessages.ObserveOn(context)
            .Subscribe(s =>
            {
                _view.InfoMessage = s;
                StateHasChanged();
            });
        
        Observable.Interval(TimeSpan.FromSeconds(1))
            .ObserveOn(context)
            .Subscribe(l => StateHasChanged());
    }

    private async Task ForceBackup()
    {
        var result = await _confirm.GetConfirmation("Confirm Backup", "Are you sure you want to force a backup task for this target?");

        if (_target.State != TargetState.Scheduled)
        {
            return;
        }
        
        if (result)
        {
            await Task.Run(() =>_target.RunJob(true));
        }
    }

}