@page "/"
@using MySqlBackupAgent.Services
@using System.Reactive.Linq
@using System.Threading
@using MySqlBackupAgent.Models
@using System.ComponentModel
@inject BackupTargetService BackupTargets

<h3>MySQL Backup Utility</h3>
This is a static service, all configuration is performed through the 'appsettings.json' file.

@foreach (var target in _targets.Values)
{
    <BSCard Color="Color.Dark">
        <BSCard CardType="CardType.Body">
            <BSCard CardType="CardType.Title">@target.Name</BSCard>
            <BSCard CardType="CardType.Text">
                <!-- Information message for this target -->
                @if (!string.IsNullOrEmpty(target.InfoMessage))
                {
                    <div>@target.InfoMessage</div>
                }


                <!-- Detailed info for current state -->
                @if (target.State == TargetState.BackingUp)
                {
                    <div>Backing Up Database</div><br/>
                    <BSProgress Value="@((int) target.Progress)" IsStriped="true" IsAnimated="true"/>
                }
                
                else if (target.State == TargetState.Scheduled)
                {
                    <span>Backup runs in @target.RunsInText</span>
                }
                
                else if (target.State == TargetState.Compressing)
                {
                    <div>Compressing Backup File</div><br/>
                    <BSProgress Value="@((int) target.Progress)" IsStriped="true" IsAnimated="true"/>
                }
                
                else if (target.State == TargetState.UploadingToStorage)
                {
                    <div>Uploading to storage...</div>
                }
                
                <!-- Existing Backups -->
                @foreach (var backup in target.Backups)
                {
                    <div>@backup.FileName</div>
                }
            </BSCard>
        </BSCard>
    </BSCard>
    <br />
}


@code {
    private Dictionary<string, DbTargetView> _targets;

    protected override void OnInitialized()
    {
        // Extract and check the current synchronization context
        var context = SynchronizationContext.Current;
        if (context == null)
        {
            throw new NullReferenceException("There appears to be no current SynchronizationContext");
        }
        
        // Initialize the target collection
        _targets = new Dictionary<string, DbTargetView>();
        
        // Load the target representation objects
        foreach (var pair in BackupTargets.Targets)
        {
            var target = pair.Value.ToRepr();
            target.State = pair.Value.State;
            target.NextTime = pair.Value.NextTime;
            target.Backups = pair.Value.Backups.ToList();
            
            _targets[pair.Key] = target;

            // Update for progress bar
            pair.Value.Progress //.Throttle(TimeSpan.FromSeconds(0.5))
                .ObserveOn(context)
                .Subscribe(d =>
                {
                    _targets[pair.Key].Progress = d;
                    StateHasChanged();
                });

            // Update for overall state
            pair.Value.StateChange.ObserveOn(context)
                .Subscribe(s =>
                {
                    _targets[pair.Key].State = s;
                    StateHasChanged();
                });
            
            // Update for next scheduled time 
            pair.Value.ScheduledChange.ObserveOn(context)
                .Subscribe(t =>
                {
                    _targets[pair.Key].NextTime = t;
                    StateHasChanged();
                });

            pair.Value.InfoMessages.ObserveOn(context)
                .Subscribe(s =>
                {
                    _targets[pair.Key].InfoMessage = s;
                    StateHasChanged();
                });
        }
        
        // Update display every second for timer
        Observable.Interval(TimeSpan.FromSeconds(1))
            .ObserveOn(context)
            .Subscribe(l => StateHasChanged());
    }

}
